{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#getting-started","title":"Getting started","text":"<p>Want to give Open Voice OS a try? Open Voice OS is an open source software that runs where you want it to, whether it\u2019s on your own hardware or one of the dedicated Mark 1 or Mark II.</p> <ul> <li> <p> Docker</p> <p><code>arm64</code> <code>x86_64</code> </p> <p>Use container engine such as Docker or Podman and their <code>composer</code> to run a complete, secure, isolated and \"easy to update\" instance of Open Voice OS!</p> <p> Getting started with Docker</p> </li> </ul>"},{"location":"about/what-is-it/","title":"What is it?","text":""},{"location":"about/what-is-it/#what-is-open-voice-os","title":"What is Open Voice OS?","text":"<p>Open Voice OS is a free and open source personal assistant and smart speaker that offers a powerful and flexible alternative to proprietary solutions like Amazon\u2122 Alexa\u2122, Google Assistant\u2122, Microsoft Cortana\u2122 or Apple's Siri\u2122.</p> <p></p> <p>At the same time, it is also an open virtual assistant platform that enables developers and organizations to create custom voice-controlled applications. With its cutting-edge technology and user-friendly design, Open Voice OS is revolutionizing the way we interact with technology.</p> <p>The platform provides a comprehensive suite of features that makes it easy to deploy voice-based applications for a wide range of use cases, including home automation, entertainment, education, and more. With natural language processing, multi-device compatibility, a customizable UI, robust APIs, and a focus on <code>privacy</code> and <code>security</code>, Open Voice OS delivers a highly responsive and accurate experience for users.</p> <p>Open Voice OS is the perfect choice for anyone who wants a personal assistant and smart speaker that gives them complete control over their data and the ability to customize their experience.</p> <p>In addition to its voice capabilities, Open Voice OS also features a touch-screen GUI made using QT and the KDE frameworks, providing an intuitive and user-friendly interface. And with its open source nature, anyone with technical skills can contribute to the platform and help shape its future.</p>"},{"location":"about/why-use-ovos/","title":"Why use OVOS?","text":""},{"location":"about/why-use-ovos/#why-use-ovos","title":"Why use OVOS?","text":"<p>Whether you prefer voice commands or a more traditional touch interface, Open Voice OS has you covered, and the option to run the platform fully offline gives you complete control over your data and ensures that your information is never shared with third parties.</p> <p>With its powerful and flexible features, Open Voice OS is the ideal choice for anyone who wants a voice-controlled virtual assistant and smart speaker that offers complete control and customization. Whether you\u2019re a software developer, data scientist, or just someone with a passion for technology, be sure to check out Open Voice OS today!</p>"},{"location":"about/why-use-ovos/#multi-device-compatibility","title":"Multi-device compatibility","text":"<p>Open Voice OS can be integrated with a wide range of devices making it easy for you to access and control your virtual assistant no matter where you are.</p> <ul> <li>Smart speakers</li> <li>Smartphones</li> <li>System on a chip (SoC)</li> <li>Laptops</li> <li>Televisions</li> </ul>"},{"location":"about/why-use-ovos/#customizable-ui","title":"Customizable UI","text":"<p>With its easy-to-use GUI interface, Open Voice OS allows developers to create custom interfaces that match their specific brand and style. Whether you\u2019re a business looking to integrate voice control into your product offerings, or a home user who wants a unique interface that matches your personal style, Open Voice OS has you covered.</p>"},{"location":"about/why-use-ovos/#robust-modular","title":"Robust &amp; Modular","text":"<p>Open Voice OS leverages the power of skills and plugins to create a robust and modular virtual assistant platform, offering unparalleled customization and extension capabilities.</p>"},{"location":"about/why-use-ovos/#fully-offline","title":"Fully offline","text":"<p>Open Voice OS can run without the use of any online Text-To-Speech (TTS) or Speech-To-Text (STT) services, so you don\u2019t have to rely on anyone keeping their servers up or recording your requests.</p>"},{"location":"about/why-use-ovos/#privacy-and-security","title":"Privacy and security","text":"<p>Open Voice OS is designed with <code>privacy</code> and security in mind. Whether you\u2019re concerned about the <code>security</code> of your personal information or the <code>privacy</code> of your voice commands, Open Voice OS provides peace of mind.</p>"},{"location":"about/glossary/components/","title":"Components","text":""},{"location":"about/glossary/components/#components","title":"Components","text":"<p>Open Voice OS is very modular which means instead of a big monolith block of code, multiple projects exist around the OVOS ecosystem with each of them having their own role to play in order to deliver the best and fastest experience.</p>"},{"location":"about/glossary/components/#ovos-audio","title":"ovos-audio","text":"<p>The audio service is responsible for loading Text-To-Speech and audio plugins.</p> <p>All audio playback (sounds played on the speakers) is handled by this service by leveraging the sound server/service from the system where its running.</p>"},{"location":"about/glossary/components/#ovos-common-play","title":"ovos-common-play","text":"<p>OVOS Common Play (OCP) is a full-fledged voice media player packaged as an audio plugin.</p> <p>OCP handles the whole voice integration and playback functionality, it also integrates with external players via Media Player Remote Interfacing Specification (MPRIS).</p>"},{"location":"about/glossary/components/#ovos-config","title":"ovos-config","text":"<p>Helper package to interact with OVOS configuration. A small tool is included to quickly show, get or set config values.</p>"},{"location":"about/glossary/components/#ovos-core","title":"ovos-core","text":"<p>The skills service is responsible for loading skills and intent parsers, all user queries are handled by the skills service.</p> <p>This is the brains of the device. Without it, you would have some cool software that does not work together. It controls the skills service and directs intents to the right skill.</p>"},{"location":"about/glossary/components/#ovos-classifiers","title":"ovos-classifiers","text":"<p>Base implementations for Natural language processing (NPL) tasks, from baseline heuristics to classic machine learning models that run everywhere.</p>"},{"location":"about/glossary/components/#ovos-gui","title":"ovos-gui","text":"<p>OVOS uses the standard Mycroft GUI framework, you can find the official documentation here.</p> <p>The GUI is an open source visual and display framework running on top of KDE Plasma Technology and built using Kirigami a lightweight user interface framework for convergent applications which are empowered by QT.</p> <p>Component dependency</p> <p>This component depends on  ovos-gui-messagebus.</p>"},{"location":"about/glossary/components/#ovos-gui-messagebus","title":"ovos-gui-messagebus","text":"<p>GUI messagebus service, manages GUI state and implements the GUI protocol.</p> <p>The GUI service provides a websocket for gui clients to connect to, it is responsible for implementing the gui protocol under ovos-core.</p> <p>GUI clients (the application that actually draws the GUI) connect to this service.</p>"},{"location":"about/glossary/components/#ovos-listener","title":"ovos-listener","text":"<p>The listener (also known as speech) is responsible for loading STT, VAD and wake word plugins. Speech is transcribed into text (intent) and forwarded to the core service.</p> <p>The newest listener that OVOS uses is <code>ovos-dinkum-listener</code>. It is a version of the listener from the Mycroft Dinkum software for the Mark 2 modified for use with OVOS.</p>"},{"location":"about/glossary/components/#ovos-messagebus","title":"ovos-messagebus","text":"<p>The message bus service provides a websocket where all internal events travel, you can think of the bus service as Open Voice OS's nervous system.</p> <p>Internal usage only</p> <p>The bus is considered as an internal and private websocket, external clients should not connect directly to it. Please check HiveMind for more information. For more detail please go to the System Hardening section</p>"},{"location":"about/glossary/components/#ovos-phal","title":"ovos-phal","text":"<p>Plugin based Hardware Abstraction Layer is a wrapper for software system level abstraction, where based on the environment either through known configuration or via fingerprinting, only specific plugins load to interface with the system and specific hardware.</p> <p>A PHAL plugin can provide anything from hardware integrations (ReSpeaker, Mark1, Mark2, etc...) or system integrations (Network-Manager, OVOS Shell, etc...).</p> <p>Any number of plugins providing functionality can be loaded and validated at runtime, plugins can be system integrations to handle things like reboot and shutdown, or hardware drivers such as Mycroft Mark2 plugin.</p> <p>PHAL admin variant</p> <p>In addition of the initial PHAL service, PHAL admin is running as <code>root</code> or as a priviledged user. This variant allows PHAL admin to perform actions which require more privileges such as <code>reboot</code> for example.</p>"},{"location":"about/glossary/components/#ovos-plugin-manager","title":"ovos-plugin-manager","text":"<p>OPM is the OVOS Plugin Manager, this base package provides arbitrary plugins to the OVOS ecosystem. OPM plugins import their base classes from OPM making them portable and independent of <code>ovos-core</code>, plugins can be used in a standalone projects.</p> <p>By using OPM you can ensure a standard interface to plugins and easily make them configurable in your project.</p>"},{"location":"about/glossary/components/#ovos-shell","title":"ovos-shell","text":"<p>OVOS Shell is the Open Voice OS client implementation of the ovos-gui library, basically it represents the OVOS graphical layer on top of Mycroft GUI.</p> <p>Component dependency</p> <p>This component depends on  ovos-gui.</p>"},{"location":"about/glossary/components/#ovos-utils","title":"ovos-utils","text":"<p>Just a collection of simple utilities and functions for use across the components from the OVOS ecosystem.</p>"},{"location":"about/glossary/components/#ovos-workshop","title":"ovos-workshop","text":"<p>Workshop contains skill base classes and supporting tools to build skills and applications for Open Voice OS systems.</p>"},{"location":"about/glossary/components/#padacioso","title":"padacioso","text":"<p>A lightweight, dead-simple intent parser which aim to replace the current intent parser; Padatious.</p>"},{"location":"about/glossary/terms/","title":"Terms","text":""},{"location":"about/glossary/terms/#glossary","title":"Glossary","text":"<p>Use our Glossary to learn more about the specialist terms that we use in natural language processing generally, and more specifically with Open Voice OS software.</p>"},{"location":"about/glossary/terms/#fallback","title":"Fallback","text":"<p>A skill that is designated to be a 'catch-all' when Open Voice OS cannot interpret the intent from an utterance.</p>"},{"location":"about/glossary/terms/#hivemind","title":"HiveMind","text":"<p>HiveMind is a community-developed superset or extension of Open Voice OS the open-source voice operating system.</p> <p>With HiveMind, you can extend an instance of Open Voice OS to as many devices as you want, including devices that can't ordinarily run Open Voice OS! </p> <p>HiveMind could be considered as an external Open Voice OS component leaving its \"own\" life under its \"own\" lifecycle.</p>"},{"location":"about/glossary/terms/#hotword","title":"Hotword","text":"<p>See wake word.</p>"},{"location":"about/glossary/terms/#intent","title":"Intent","text":"<p>When a user speaks an utterance to Open Voice OS, Open Voice OS tries to interpret the intent of the utterance, and match the intent with a skill.</p>"},{"location":"about/glossary/terms/#playback","title":"Playback","text":"<p>Playback is the audio output going through the speakers, for example when asking <code>What's the temperature?</code>, OVOS will speaks to you using the playback capability.</p>"},{"location":"about/glossary/terms/#plugin","title":"Plugin","text":"<p>A plugin allows you to install \"small bricks\" of functionnalities using OVOS Plugin Manager in order to make your voice assistant more capable.</p> <p>Open Voice OS uses many plugins in many different areas:</p> <ul> <li>Wake word plugin</li> <li>VAD plugins</li> <li>Microphone plugins</li> <li>PHAL plugins</li> <li>TTS plugins</li> <li>STT plugins</li> <li>etc...</li> </ul>"},{"location":"about/glossary/terms/#skill","title":"Skill","text":"<p>When Open Voice OS hears the wake word, then an utterance, Open Voice OS will try to find a skill that matches the utterance. The skill might fetch some data, or play some audio, or speak, or display some information.</p> <p>If Open Voice OS can't find a skill that matches the utterance, he will tell you he doesn't understand and fallback (when configured).</p>"},{"location":"about/glossary/terms/#speech-to-text-stt","title":"Speech-To-Text (STT)","text":"<p>Speech-To-Text is what converts your voice into a text which becomes a commands that OVOS recognizes, then converts to an intent that is used to activate skills.</p> <p>Several options are available each with different attributes and supported languages. Some can be run on device, others need an internet connection to work.</p>"},{"location":"about/glossary/terms/#text-to-speech-tts","title":"Text-To-Speech (TTS)","text":"<p>Text-To-Speech is responsible for converting text into audio for playback (verbal response from OVOS).</p> <p>Several options are available each with different attributes and supported languages. Some can be run on device, others need an internet connection to work.</p>"},{"location":"about/glossary/terms/#utterance","title":"Utterance","text":"<p>An utterance is how you interact with Open Voice OS. An utterance is a command or question - like <code>What's the weather like in Kansas City?</code> or <code>Tell me about the Pembroke Welsh Corgi</code>.</p>"},{"location":"about/glossary/terms/#vad","title":"VAD","text":"<p>Voice Activity Detection is used by the listener to determine when a user stopped speaking, this indicates the voice command is ready to be executed.</p>"},{"location":"about/glossary/terms/#wake-word","title":"Wake Word","text":"<p>The wake word is the phrase or word you use to (wake up) tell Open Voice OS you're about to issue a command.</p>"},{"location":"getting-started/docker/","title":"Docker or Podman","text":""},{"location":"getting-started/docker/#docker-or-podman","title":"Docker or Podman","text":"<p>Before going further, here are quick and simple definitions of what a container is and what a <code>composer</code> is, these definitions are important and must be well understood before starting.</p> <p>Two engines, same definition</p> <p>Both of the definitions described below are valid for either Docker or Podman. </p>"},{"location":"getting-started/docker/#container-definition","title":"Container definition","text":"<p>A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A container image is a lightweight, standalone, executable package of software that includes everything needed to run an application.</p> <p>Initial source</p> <p></p>"},{"location":"getting-started/docker/#composer-definition","title":"Composer definition","text":"<p>A composer is a tool for defining and running multi-container container applications. With Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration.</p> <p>Initial source</p> <p></p>"},{"location":"getting-started/docker/cli/","title":"OVOS command line","text":""},{"location":"getting-started/docker/cli/#open-voice-os-command-line","title":"Open Voice OS command line","text":"<p>The command line allows you to send a message (but not only) directly to the message bus by using the <code>ovos-cli-client</code> command from the <code>ovo_cli</code> container.</p> <p>Skill interactions</p> <p>The command line doesn't support any action related to skills other than <code>:skills</code> as this setup is running inside containers. Please read the skill section to manage skills.</p> <p></p>"},{"location":"getting-started/docker/cli/#ovos-cli-client","title":"ovos-cli-client","text":"<p><code>ovos-cli-client</code> is deprecated</p> <p>Please read https://github.com/OpenVoiceOS/ovos-cli-client/issues/14 for more information.</p> <p>Interact directly with the ncurses OVOS client interface.</p> DockerPodman <pre><code>docker exec --interactive --tty ovos_cli ovos-cli-client\n</code></pre> <pre><code>podman exec --interactive --tty ovos_cli ovos-cli-client\n</code></pre>"},{"location":"getting-started/docker/cli/#ovos-config","title":"ovos-config","text":"<p>To display or manage the current configuration, the <code>ovos-config</code> command could be used.</p> <p><code>read-write</code> access to the configuration</p> <p>The <code>ovos_cli</code> container is the only one having <code>read-write</code> access to the <code>mycroft.conf</code> configuration file.</p> DockerPodman <pre><code>docker exec --interactive --tty ovos_cli ovos-config show\n</code></pre> <pre><code>podman exec --interactive --tty ovos_cli ovos-config show\n</code></pre> <p><code>vim</code> as default editor</p> <p><code>vim</code> and <code>nano</code> editors are available within the <code>ovos-cli</code> image, <code>vim</code> has been set as default.</p>"},{"location":"getting-started/docker/cli/#ovos-speak","title":"ovos-speak","text":"<p>An easy way to make Open Voice OS speaks is to run the <code>ovos-speak</code> command.</p> DockerPodman <pre><code>docker exec --interactive --tty ovos_cli ovos-speak \"hello world\"\n</code></pre> <pre><code>podman exec --interactive --tty ovos_cli ovos-speak \"hello world\"\n</code></pre>"},{"location":"getting-started/docker/cli/#mana","title":"mana","text":"<p>Neon Mana (Messagebus Application for Neon AI) provides tools for interacting with the message bus.</p> DockerPodman <pre><code>docker exec --interactive --tty ovos_cli mana --help\n</code></pre> <pre><code>podman exec --interactive --tty ovos_cli mana --help\n</code></pre>"},{"location":"getting-started/docker/composition/","title":"Composition","text":""},{"location":"getting-started/docker/composition/#composition-and-environment-files","title":"Composition and environment files","text":"<p>The easiest and quickest way to deploy Open Voice OS containers is to use a composer such as <code>docker composer</code> or <code>podman-compose</code>.</p>"},{"location":"getting-started/docker/composition/#composition-files","title":"Composition files","text":"<p>Composition files provide an easy way to provision the stack (services and volumes) with the required options and configuration for each of the services.</p> Compose file Platforms Description <code>docker-compose.yml</code> Install core components (except the GUI) <code>docker-compose.gui.yml</code> Install GUI components <code>docker-compose.skills.yml</code> Install pre-defined skills <code>docker-compose.hivemind.yml</code> Install HiveMind components <code>docker-compose.macos.yml</code> Install core components (except the GUI) <code>docker-compose.windows.yml</code> Install core components (except the GUI) <code>docker-compose.raspberrypi.yml</code> Add GPIO support to <code>ovos_core</code> component <code>docker-compose.raspberrypi.gui.yml</code> Add <code>/dev/vchiq</code> to <code>ovos_gui</code> component"},{"location":"getting-started/docker/composition/#environment-files","title":"Environment files","text":"<p>A Docker or Podman environment file contains lines about environment variables that are usable by the Docker or Podman command line. It is a convenient way to pass many environment variables to a single command.</p> Environment file Platforms Description <code>.env</code> Set of variables used by the composition files <code>.env-raspberrypi</code> Add <code>GPIO_GID</code> and <code>RENDER_GID</code> variables <p>Some variables might need to be tuned to match your setup such as the <code>TZ</code>, <code>XDG_RUNTIME_DIR</code>, etc...</p> Variable Default Platforms Description <code>DISPLAY</code> <code>:0</code> Display used by X or Wayland <code>GPIO_GID</code> <code>997</code> <code>gpio</code> group ID on Raspberry Pi <code>HIVEMIND_CONFIG_FOLDER</code> <code>~/hivemind/config</code> HiveMind configuration directory <code>HIVEMIND_SHARE_FOLDER</code> <code>~/hivemind/share</code> HiveMind shared directory <code>HIVEMIND_USER</code> <code>hivemind</code> User running in the container <code>INPUT_GID</code> <code>102</code> <code>input</code> group ID <code>OVOS_CONFIG_FOLDER</code> <code>~/ovos/config</code> OVOS configureation directory <code>OVOS_SHARE_FOLDER</code> <code>~/ovos/share</code> OVOS shared directory <code>OVOS_USER</code> <code>ovos</code> User running in the container <code>PULL_POLICY</code> <code>always</code> Policy to pull Docker images <code>RENDER_GID</code> <code>106</code> <code>render</code> group ID on Raspberry Pi <code>TMP_FOLDER</code> <code>~/ovos/tmp</code> OVOS temporary directory <code>TZ</code> <code>America/Montreal</code> Timezone to set in the container <code>VERSION</code> <code>alpha</code> Container image tag to pull <code>VIDEO_GID</code> <code>44</code> <code>video</code> group ID <code>XDG_RUNTIME_DIR</code> <code>/run/user/1000</code> Path to XDG runtime directory <p>Do not change <code>OVOS_USER</code> or <code>HIVEMIND_USER</code></p> <p>The <code>OVOS_USER</code> and <code>HIVEMIND_USER</code> variables should not be changed except if you build your own container images which a different one.</p>"},{"location":"getting-started/docker/composition/#how-to-get-the-gid","title":"How to get the GID?","text":"<p>The <code>getent</code> command could be used in order to get the <code>GID</code> of <code>gpio</code> and <code>render</code> groups on Raspberry Pi OS.</p> Raspberry PiLinux <pre><code>getent group gpio\ngetent group render\ngetent group video\ngetent group input\n</code></pre> <pre><code>getent group video\ngetent group input\n</code></pre>"},{"location":"getting-started/docker/composition/#how-to-get-the-uid","title":"How to get the UID?","text":"<p>The <code>XDG_RUNTIME_DIR</code> variables requires a <code>UID</code>, this <code>UID</code> is the unique <code>ID</code> of the current user which will run the <code>docker compose</code> or <code>podman-compose</code> command.</p> LinuxWindows WSL2 <pre><code>echo $UID\n</code></pre> <pre><code>echo $UID\n</code></pre> <p>XDG Base Directory</p> <p>Mac OS doesn't leverage <code>XDG_RUNTIME_DIR</code> variable as there is no support of XDG Base Directory on Mac OS.</p>"},{"location":"getting-started/docker/debug/","title":"Debugging","text":""},{"location":"getting-started/docker/debug/#debugging","title":"Debugging","text":""},{"location":"getting-started/docker/debug/#enable-debug-mode","title":"Enable debug mode","text":"<p>First thing's first, enable the Open Voice OS's debug mode in <code>~/ovos/config/mycroft.conf</code> to get more verbosity from the logs.</p> <p>Restart containers</p> <p>All containers will have to be restarted to receive the configuration change.</p> ~/ovos/config/mycroft.conf<pre><code>{\n  \"debug\": true,\n  \"log_level\": \"DEBUG\"\n}\n</code></pre> <p>Note</p> <p>The commands below don't have to be executed in the same order as they are presented, free free to run them in the order you want!</p>"},{"location":"getting-started/docker/debug/#all-containers-logs","title":"All containers logs","text":"<p>Access all the container logs at the same time, run the following command (make sure it matches the <code>docker compose</code> or <code>podman-compose</code> command you run to deploy the stack).</p> DockerPodman <pre><code>docker compose --file docker-compose.yml --file docker-compose.raspberrypi.yml --file docker-compose.skills.yml --env-file .env logs --follow --tail 200\n</code></pre> <pre><code>podman-compose --file docker-compose.yml --file docker-compose.raspberrypi.yml --file docker-compose.skills.yml --env-file .env logs --follow --tail 200\n</code></pre>"},{"location":"getting-started/docker/debug/#specific-contaienr-logs","title":"Specific contaienr logs","text":"<p>Access the logs of a specific container.</p> DockerPodman <pre><code>docker logs --follow --tail 200 ovos_audio\n</code></pre> <pre><code>podman logs --follow --tail 200 ovos_audio\n</code></pre>"},{"location":"getting-started/docker/debug/#run-command-in-a-container","title":"Run command in a container","text":"<p>Execute a command inside a container without going into it.</p> DockerPodman <pre><code>docker exec --tty --interactive ovos_audio pactl info\n</code></pre> <pre><code>podman exec --tty --interactive ovos_audio pactl info\n</code></pre>"},{"location":"getting-started/docker/debug/#connect-inside-a-container","title":"Connect inside a container","text":"<p>Go inside a container and run multiple commands (where <code>sh</code> is the available shell in there).</p> DockerPodman <pre><code>docker exec --tty --interactive ovos_audio sh\n</code></pre> <pre><code>podman exec --tty --interactive ovos_audio sh\n</code></pre>"},{"location":"getting-started/docker/debug/#configuration-syntax-check","title":"Configuration syntax check","text":"<p>Make sure the <code>mycroft.conf</code> configuration file is JSON valid by using the <code>jq</code> command.</p> <p><code>jq</code> command</p> <p>In order to use the <code>jq</code> command, the package should be installed on your operating system.</p> <pre><code>cat ~/ovos/config/mycroft.conf | jq\n</code></pre> <p>If the configuration file is not valid JSON, <code>jq</code> will return something like this:</p> <pre><code>parse error: Expected another key-value pair at line 81, column 3\n</code></pre>"},{"location":"getting-started/docker/debug/#dockerpodman-consumption","title":"Docker/Podman consumption","text":"<p>Get the CPU, memory and I/O consumption per container.</p> DockerPodman <pre><code>docker stats --all --no-trunc\n</code></pre> <pre><code>podman stats --all --no-trunc\n</code></pre>"},{"location":"getting-started/docker/debug/#dockerpodman-volume-usage","title":"Docker/Podman volume usage","text":"<p>Get the disk usage per volumes.</p> DockerPodman <pre><code>docker system df\n</code></pre> <pre><code>podman system df\n</code></pre>"},{"location":"getting-started/docker/images/","title":"Images and volumes","text":""},{"location":"getting-started/docker/images/#images","title":"Images","text":"<p>Pre-build images</p> <p>Open Voice OS provides pre-build images available on Docker Hub. These images are referenced by default within the <code>docker-compose.*.yml</code> files.</p> <p>Open Voice OS is a sofisticated piece of software which has several components. These components have been split into containers to provide a better isolation and a microservices approach.</p>"},{"location":"getting-started/docker/images/#supported-cpu-architectures","title":"Supported CPU architectures","text":"<p>Container images could be used for different CPU architectures using the multi-platform images feature.</p> CPU architecture Description <code>amd64</code> Such as AMD and Intel processors <code>aarch64</code> Such as Raspberry Pi 64-bit SoC <code>armv7l</code> Such as Raspberry Pi 32-bit SoC (not supported because of <code>onnxruntime</code><sup>1</sup>)"},{"location":"getting-started/docker/images/#containers","title":"Containers","text":"<p>The list below is not exhaustive and doesn't mention anything about skill containers, but it is a fair list of the main components currently supported in ovos-docker.</p> Container Description <code>ovos_messagebus</code> Read more about ovos-messagebus <code>ovos_phal</code> Read more about ovos-phal <code>ovos_phal_admin</code> Read more about ovos-phal admin variant <code>ovos_audio</code> Read more about ovos-audio <code>ovos_listener</code> Read more about ovos-listener <code>ovos_core</code> Read more about ovos-core <code>ovos_cli</code> Read more about ovos-cli <code>ovos_gui_websocket</code> Read more about ovos-gui-messagebus <code>ovos_gui</code> Read more about ovos-gui <code>hivemind_listener</code> Read more about hivemind-listener <code>hivemind_cli</code> Read more about hivemind-cli"},{"location":"getting-started/docker/images/#tags","title":"Tags","text":"<p>Container image tags allows you to deploy a specific version of Open Voice OS, it could be an untested version based on nigthly build or a stable version.</p> Image tag Description <code>alpha</code> Nightly build based on alpha releases from PyPi <code>0.0.8a</code> Nightly build based on alpha releases from PyPi <code>stable</code> Build at every new stable release <code>0.0.8</code> Build at every new stable release <p>Stable release</p> <p>As Open Voice OS doesn't have a stable release for version <code>0.0.8</code> which has been designed to work with containers, there is no <code>stable</code> or <code>0.0.8</code> tags available yet.</p>"},{"location":"getting-started/docker/images/#volumes","title":"Volumes","text":"<p>To allow data persistence, Docker or Podman volumes are required, they will prevent downloading the requirements everytime the containers are re-created.</p> Volume Description <code>ovos_gui_file</code> Share QML files from skills between the GUI message bus and the GUI client <code>ovos_listener_records</code> Wake words and utterances recorded samples <code>ovos_models</code> Models downloaded by <code>precise-lite</code> wake word plugin <code>ovos_nltk</code> Punkt Python package required by NLTK <code>ovos_tts_cache</code> <code>.wav</code> and <code>.pho</code> files acting as cache from TTS transcription <code>ovos_vosk</code> Models downloaded by VOSK during the initial boot <p><code>ovos_listener_records</code> allows you to store samples of wake words and utterances which could help you to build or improve models.</p> <p>Enable samples recording</p> <p>By default the recording features are disabled, <code>\"record_wake_words\": true</code> and <code>\"save_utterances\": true</code> will have to be added to the <code>listener</code> section of <code>mycroft.conf</code> to enable these capabilities.</p> ~/ovos/config/mycroft.conf<pre><code>{\n\"listener\": {\n    \"record_wake_words\": true,\n    \"save_utterances\": true\n  }\n}\n</code></pre> <p>But first thing's first you need to have Open Voice OS's containers up and running. Follow the guide.</p> <ol> <li> <p>https://github.com/microsoft/onnxruntime/issues/15337 \u21a9</p> </li> </ol>"},{"location":"getting-started/docker/update/","title":"Update Open Voice OS","text":""},{"location":"getting-started/docker/update/#update-open-voice-os","title":"Update Open Voice OS","text":"<p>Exact same command</p> <p>In order to update the deployed stack (services and volumes), you must use the exact same command that has been used during the initial stack deployment.</p> <p>The easiest and quickest way to update an Open Voice OS stack already deployed by <code>docker compose</code> or <code>podman-compose</code> is; of course to use <code>docker compose</code> or <code>podman-compose</code> as well.  </p> <p>Podman users </p> <p>If you are running Podman instead of Docker, replace <code>docker compose</code> with <code>podmand-compose</code>.</p> Raspberry PiLinuxMac OSWindows WSL2 <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.raspberrypi.yml --file docker-compose.skills.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.skills.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.macos.yml --file docker-compose.skills.yml --env-file .env up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.windows.yml --file docker-compose.skills.yml  up --detach\n</code></pre> <p>Because the <code>pull_policy</code> option of each service is set to <code>always</code>, everytime that a new image is uploaded with the same tag <code>docker compose</code> or <code>podman-compose</code> will pull-it and re-create the container based on this new image.</p> <p>Change the version</p> <p>If you want to change the image's tag to deploy, update the .env file with the right one. The <code>alpha</code> tag images are rebuilt every nights with the latest commits from the <code>dev</code> branch.</p>"},{"location":"getting-started/docker/installation/basic/","title":"Core components","text":""},{"location":"getting-started/docker/installation/basic/#install-open-voice-os","title":"Install Open Voice OS","text":"<p>This section covers the installation of the core components only.</p> <p>Only core components</p> <p>Keep following the documentation if you want to install some pre-selected skills, HiveMind or even the GUI.</p>"},{"location":"getting-started/docker/installation/basic/#deploy-the-stack","title":"Deploy the stack","text":"<p>Before running the <code>docker compose</code> or <code>podman-compose</code> commands, please read this section first.</p> <p>Podman users </p> <p>If you are running Podman instead of Docker, replace <code>docker compose</code> with <code>podmand-compose</code>.</p> Raspberry PiLinuxMac OSWindows WSL2 <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.raspberrypi.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.macos.yml --env-file .env up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.windows.yml up --detach\n</code></pre> <p>Depending your Internet speed, your Wi-Fi or Ethernet connection speed and your hardware (I/O), the whole process could take several minutes.</p> Hardware Time Raspberry Pi 3B+ with USB drive ~20 minutes Raspberry Pi 4B with USB drive ~3 minutes MacBook Air i7 Early 2015 with SSD ~2.5 minutes AMD Ryzen 7 5800 with NVMe drive ~45 seconds <p>Resources overhead</p> <p>To reduce the potential ressources overhead due to the image downloads and extractions, the <code>--parallel x</code> option could be added to the command in order to process the images by batch of <code>x</code> (where <code>x</code> is an integer).</p>"},{"location":"getting-started/docker/installation/basic/#containers-status","title":"Containers status","text":"<p>At this point of the installation, here are the containers that should be up and running.</p> DockerPodman <pre><code>docker container list --all --filter 'name=ovos'\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED      STATUS                PORTS     NAMES\n219eb6254d32   smartgic/ovos-listener-dinkum:alpha          \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_listener\n31f5d5e7a1ec   smartgic/ovos-audio:alpha                    \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_audio\n05e94905b867   smartgic/ovos-core:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_core\nd256c2e7b6f3   smartgic/ovos-phal:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_phal\na4db13a597a4   smartgic/ovos-phal-admin:alpha               \"/bin/bash /usr/loca\u2026\"   25 hours ago   Up 8 hours                       ovos_phal_admin\nd157740c9965   smartgic/ovos-messagebus:alpha               \"/bin/bash -c ovos-m\u2026\"   25 hours ago   Up 8 hours (healthy)             ovos_messagebus\n6e3536dcfae5   smartgic/ovos-cli:alpha                      \"sleep infinity\"         25 hours ago   Up 8 hours                       ovos_cli\n</code></pre> <pre><code>podman container list --all --filter 'name=ovos'\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED      STATUS                PORTS     NAMES\n219eb6254d32   smartgic/ovos-listener-dinkum:alpha          \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_listener\n31f5d5e7a1ec   smartgic/ovos-audio:alpha                    \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_audio\n05e94905b867   smartgic/ovos-core:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_core\nd256c2e7b6f3   smartgic/ovos-phal:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_phal\na4db13a597a4   smartgic/ovos-phal-admin:alpha               \"/bin/bash /usr/loca\u2026\"   25 hours ago   Up 8 hours                       ovos_phal_admin\nd157740c9965   smartgic/ovos-messagebus:alpha               \"/bin/bash -c ovos-m\u2026\"   25 hours ago   Up 8 hours (healthy)             ovos_messagebus\n6e3536dcfae5   smartgic/ovos-cli:alpha                      \"sleep infinity\"         25 hours ago   Up 8 hours                       ovos_cli\n</code></pre>"},{"location":"getting-started/docker/installation/configuration/","title":"Configuration","text":""},{"location":"getting-started/docker/installation/configuration/#open-voice-os-configuration","title":"Open Voice OS configuration","text":"<p><code>~/ovos/config/mycroft.conf</code> configuration file is mounted into each containers as a <code>read-only</code> volume.</p> <p>First I configure then I deploy</p> <p>Before deploying the services and volumes, it is recommended to set the OVOS's configuration to make sure the services initial start has the correct settings such as the <code>lang</code> for example.</p>"},{"location":"getting-started/docker/installation/configuration/#initial-configuration","title":"Initial configuration","text":"<p>This configuration is very basic, it instructs the Open Voice OS instance to run in <code>English</code> as main language.</p> ~/ovos/config/mycroft.conf<pre><code>{\n  \"play_wav_cmdline\": \"aplay %1\",\n  \"lang\": \"en-us\",\n  \"listener\": {\n    \"VAD\": {\n      \"module\": \"ovos-vad-plugin-silero\"\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/docker/installation/configuration/#configure-the-logging","title":"Configure the logging","text":"<p>By default, the Open Voice OS services will write their logs into a file under <code>~/.local</code> directory, these files are not rotated or compressed which could lead to a disk space issue.</p> <p>The solution is to add these lines into the <code>~/ovos/config/mycroft.conf</code> file (create the file if it does not exist), this will tell the services to redirect their logs to the container <code>stdout</code>.</p> ~/ovos/config/mycroft.conf<pre><code>{\n  \"logs\": {\n    \"path\": \"stdout\"\n  },\n  \"play_wav_cmdline\": \"aplay %1\",\n  \"lang\": \"en-us\",\n  \"listener\": {\n    \"VAD\": {\n      \"module\": \"ovos-vad-plugin-silero\"\n    }\n  }\n}\n</code></pre> <p>Services already deployed</p> <p>If the services have been already deployed and the <code>~/ovos/config/mycroft.conf</code> has changed, then you will have to restart the containers impacted by the change(s).</p>"},{"location":"getting-started/docker/installation/gui/","title":"GUI","text":""},{"location":"getting-started/docker/installation/gui/#install-the-open-voice-os-gui","title":"Install the Open Voice OS GUI","text":"<p>Linux only</p> <p>The GUI is currently only available on Linux operating system, not on Mac OS or Windows.</p> <p>The Open Voice OS GUI supports two types of system execution:</p> <ul> <li>Using X or Wayland display servers</li> <li>Using EGLFS which doesn't require any display server which is perfect for headless installation</li> </ul> <p>When using EGLFS, the <code>DISPLAY</code> variable from the <code>.env</code> composition environment file must be removed or commented as if present the X or Wayland display servers will be tried first and result in an <code>ovos_gui</code> container in error.</p> <p>Hardware accelerated on Raspberry Pi 4 and 5 only</p> <p>Raspberry Pi 4 and 5 will leverage the GPU hardware acceleration which will provide a smoother experience.</p> <p>If not running on a Raspberry Pi 4 or 5 then the CPU might be used to render the GUI which will result in a high CPU consumption and a poor exprience.</p>"},{"location":"getting-started/docker/installation/gui/#configuration","title":"Configuration","text":"<p>The <code>ovos-gui-messagebus</code> component must be configured in order to receive the QML files from the skill containers. Because of these file transfers, the <code>ovos-message-bus</code> component must be configured to allow bigger payload.</p> ~/ovos/config/mycroft.conf<pre><code>{\n  \"logs\": {\n    \"path\": \"stdout\"\n  },\n  \"play_wav_cmdline\": \"aplay %1\",\n  \"lang\": \"en-us\",\n  \"listener\": {\n    \"VAD\": {\n      \"module\": \"ovos-vad-plugin-silero\"\n    }\n  },\n  \"gui\": {\n    \"extension\": \"ovos-gui-plugin-shell-companion\",\n    \"idle_display_skill\": \"skill-ovos-homescreen.openvoiceos\",\n    \"generic\": {\n      \"homescreen_supported\": true\n    },\n    \"gui_file_host_path\": \"/home/ovos/.cache/gui_files\"\n  },\n  \"websocket\": {\n    \"max_msg_size\": 100\n  }\n}\n</code></pre>"},{"location":"getting-started/docker/installation/gui/#xhost-and-display-servers","title":"xhost and display servers","text":"<p>Tip</p> <p>You can skip this section if your are using EGLFS and go to GUI services deployment.</p> <p>In order to allow only the <code>ovos_gui</code> container to access to the X or Wayland display server, you will have to allow the container (based on its hostname) to connect to the display session.</p> <pre><code>export DISPLAY=\":0\"\nxhost +local:ovos_gui\n</code></pre> <p>This command is not permanent, when your operating system will reboot you will have to run the command again. To make it permanent Systemd should be leveraged as a user service.</p> Raspberry PiLinux <pre><code>mkdir -p ~/.config/systemd/user\n</code></pre> <pre><code>mkdir -p ~/.config/systemd/user\n</code></pre> <p>Create the <code>xhost.service</code> unit file into the <code>~/.config/systemd/user</code> directory.</p> ~/.config/systemd/user/xhost.service<pre><code>[Unit]\nDescription=Allow ovos_gui container to use X from user session\n\n[Service]\nType=oneshot\nEnvironment=\"DISPLAY=:0\"\nExecStart=/usr/bin/xhost +local:ovos_gui\nExecStop=/usr/bin/xhost -local:ovos_gui\nRemainAfterExit=yes\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Enable and start the new <code>xhost.service</code> Systemd service</p> Raspberry PiLinux <pre><code>systemctl --user enable xhost.service\nsystemctl --user start xhost.service\n</code></pre> <pre><code>systemctl --user enable xhost.service\nsystemctl --user start xhost.service\n</code></pre> <p>The <code>xhost</code> command is part of the <code>x11-xserver-utils</code> package on Debian based distributions such as Raspberry Pi OS.</p>"},{"location":"getting-started/docker/installation/gui/#gui-services-deployment","title":"GUI services deployment","text":"<p>Podman users </p> <p>If you are running Podman instead of Docker, replace <code>docker compose</code> with <code>podmand-compose</code>.</p> Raspberry PiLinux <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.raspberrypi.yml --file docker-compose.skills.yml --file docker-compose.gui.yml --file docker-compose.raspberrypi.gui.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.skills.yml --file docker-compose.gui.yml up --detach\n</code></pre>"},{"location":"getting-started/docker/installation/requirements/","title":"Requirements","text":""},{"location":"getting-started/docker/installation/requirements/#final-steps-before-the-run","title":"Final steps before the run","text":"<p>Before going further, please make sure to refer to this section as the following commands could defer depending your setup.</p>"},{"location":"getting-started/docker/installation/requirements/#get-the-ovos-docker-sources","title":"Get the <code>ovos-docker</code> sources","text":"<p>The <code>~/hivemind</code> directory is only required if you plan to use HiveMind.</p> All <pre><code>git clone https://github.com/OpenVoiceOS/ovos-docker.git -b dev\nmkdir -p ~/ovos/{config,share,tmp} ~/hivemind/{config,share}\nchown ${USER}:${USER} -R ~/ovos ~/hivemind\ncd ~/ovos-docker/compose\n</code></pre>"},{"location":"getting-started/docker/installation/requirements/#enable-user-manager","title":"Enable user manager","text":"<p>Because some containers require <code>/run/user/1000</code> to be mounted, systemd should be instruct to log the user during the boot process and mak<code>/run/user/1000</code> directory available before the containers start.</p> Raspberry PiLinux <pre><code>sudo loginctl enable-linger $USER\n</code></pre> <pre><code>sudo loginctl enable-linger $USER\n</code></pre>"},{"location":"getting-started/docker/installation/requirements/#set-the-environment-file","title":"Set the environment file","text":"<p>The <code>composer</code> requires an environment file in order to deploy the services and volumes with the correct settings for your setup.</p> <p><code>alpha</code> version by default</p> <p>As mentioned in this section, the current default <code>VERSION</code> (tag) is <code>alpha</code>.</p> Raspberry PiLinuxMac OSWindows WSL2 <pre><code>cp .env-raspberrypi .env\n</code></pre> <pre><code>cp .env.example .env\n</code></pre> <pre><code>cp .env.example .env\n</code></pre> <pre><code>cp .env.example .env\n</code></pre> <p>Examples are provided, please make sure to select the right one and to set the proper values.</p>"},{"location":"getting-started/docker/installation/skills/","title":"Skills","text":""},{"location":"getting-started/docker/installation/skills/#howto-install-skills","title":"Howto install skills?","text":"<p>Two different methods are supported by <code>ovos-docker</code> to install Open Voice OS's skills, each of them having pros  and cons .</p> <p>Slow hardware</p> <p>When running Open Voice OS on slow hardware such as Raspberry Pi 3B+, it is recommended to install skills using the \"As part of <code>ovos_core</code> container\" method in order to reduce the memory consumption.</p>"},{"location":"getting-started/docker/installation/skills/#as-part-of-ovos_core-container","title":"As part of <code>ovos_core</code> container","text":"<p>The first method is to use a <code>skills.list</code> file within the <code>~/ovos/config/</code> directory, this file acts as a Python <code>requirements.txt</code> file.</p> <p>When <code>ovos_core</code> container starts, it will look for a <code>skills.list</code> file and install the skills defined in there.</p> <p>Skill requirements</p> <p>The skill has to be compatible with the <code>pip install</code> method which requires a <code>setup.py</code> file.</p> skills.list<pre><code>ovos-skill-stop # Latest skill version on PyPi\novos-skill-volume==0.0.1 # Specific skill version on PyPi\ngit+https://github.com/OpenVoiceOS/skill-ovos-wikipedia.git@fix/whatever # Specific skill's branch on GitHub\n</code></pre> <p>If the <code>ovos_core</code> container is wiped for any reasons (like an update), the skill(s) will be automatically reprovisioned.</p> <p>Not only for skills</p> <p><code>skills.list</code> file could be used as well to install extra Python librairies, e.g., <code>SoCo</code>, <code>RPi.GPIO</code>. Just make sure to avoid empty lines.</p> <p>The main advantage of this method is the simplicity but the downside will be more Python dependencies (libraries) within the <code>ovos_core</code> container, potential conflicts across them, a lack of isolation and a slower start of the container.</p>"},{"location":"getting-started/docker/installation/skills/#as-standalone-container-recommended","title":"As standalone container (recommended)","text":"<p>The second method is to leverage the ovos-workshop component by running a skill as standalone, it means the skill will not be part of <code>ovos_core</code> container but it will be running inside its own container.</p> <p>The main advantage is that each skill are isolated which provide more flexibility about Python dependencies (libraries), packages. It is easier to update and more secure but the downside will be that more system resources will be consumed and a container image has to be built for each skill.</p> <p>Podman users </p> <p>If you are running Podman instead of Docker, replace <code>docker compose</code> with <code>podmand-compose</code>.</p> Raspberry PiLinuxMac OSWindows WSL2 <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.raspberrypi.yml --file docker-compose.skills.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.skills.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.macos.yml --file docker-compose.skills.yml --env-file .env up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.windows.yml --file docker-compose.skills.yml up --detach\n</code></pre> <p>Depending your Internet speed, your Wi-Fi or Ethernet connection speed and your hardware (I/O), the whole process could take several minutes.</p> Hardware Time Raspberry Pi 3B+ with USB drive ~12 minutes Raspberry Pi 4B with USB drive ~48 seconds MacBook Air i7 Early 2015 with SSD ~50 seconds AMD Ryzen 7 5800 with NVMe drive ~15 seconds <p>Resources overhead</p> <p>To reduce the potential ressources overhead due to the image downloads and extractions, the <code>--parallel x</code> option could be added to the command in order to process the images by batch of <code>x</code> (where <code>x</code> is an integer).</p> <p>If the <code>ovos_core</code> container is restarted or even deleted, the skill containers will automatically register again to it.</p>"},{"location":"getting-started/docker/installation/skills/#containers-status","title":"Containers status","text":"<p>At this point of the installation, here are the containers that should be up and running.</p> DockerPodman <pre><code>docker container list --all --filter 'name=ovos'\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED        STATUS                 PORTS     NAMES\n1446b87d7a32   smartgic/ovos-skill-volume:alpha             \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_volume\n7ad46a871661   smartgic/ovos-skill-wikipedia:alpha          \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_wikipedia\nb43b8cf31a43   smartgic/ovos-skill-fallback-unknown:alpha   \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_fallback_unknown\nf27d3fceecec   smartgic/ovos-skill-alerts:alpha             \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_alerts\n30b70c9e72ef   smartgic/ovos-skill-hello-world:alpha        \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_hello_world\nf42175c6d7b8   smartgic/ovos-skill-weather:alpha            \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_weather\n0ae42a59fb0b   smartgic/ovos-skill-stop:alpha               \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_stop\n5760fb22deb9   smartgic/ovos-skill-date-time:alpha          \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_date_time\n73f4d4b0a091   smartgic/ovos-skill-personal:alpha           \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_personal\n219eb6254d32   smartgic/ovos-listener-dinkum:alpha          \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_listener\n31f5d5e7a1ec   smartgic/ovos-audio:alpha                    \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_audio\n05e94905b867   smartgic/ovos-core:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_core\nd256c2e7b6f3   smartgic/ovos-phal:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_phal\na4db13a597a4   smartgic/ovos-phal-admin:alpha               \"/bin/bash /usr/loca\u2026\"   25 hours ago   Up 8 hours                       ovos_phal_admin\nd157740c9965   smartgic/ovos-messagebus:alpha               \"/bin/bash -c ovos-m\u2026\"   25 hours ago   Up 8 hours (healthy)             ovos_messagebus\n6e3536dcfae5   smartgic/ovos-cli:alpha                      \"sleep infinity\"         25 hours ago   Up 8 hours                       ovos_cli\n</code></pre> <pre><code>podman container list --all --filter 'name=ovos'\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED        STATUS                 PORTS     NAMES\n1446b87d7a32   smartgic/ovos-skill-volume:alpha             \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_volume\n7ad46a871661   smartgic/ovos-skill-wikipedia:alpha          \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_wikipedia\nb43b8cf31a43   smartgic/ovos-skill-fallback-unknown:alpha   \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_fallback_unknown\nf27d3fceecec   smartgic/ovos-skill-alerts:alpha             \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_alerts\n30b70c9e72ef   smartgic/ovos-skill-hello-world:alpha        \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_hello_world\nf42175c6d7b8   smartgic/ovos-skill-weather:alpha            \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_weather\n0ae42a59fb0b   smartgic/ovos-skill-stop:alpha               \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_stop\n5760fb22deb9   smartgic/ovos-skill-date-time:alpha          \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_date_time\n73f4d4b0a091   smartgic/ovos-skill-personal:alpha           \"ovos-skill-launcher\u2026\"   18 hours ago   Up 8 hours                       ovos_skill_personal\n219eb6254d32   smartgic/ovos-listener-dinkum:alpha          \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_listener\n31f5d5e7a1ec   smartgic/ovos-audio:alpha                    \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_audio\n05e94905b867   smartgic/ovos-core:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_core\nd256c2e7b6f3   smartgic/ovos-phal:alpha                     \"/bin/bash /usr/loca\u2026\"   18 hours ago   Up 8 hours                       ovos_phal\na4db13a597a4   smartgic/ovos-phal-admin:alpha               \"/bin/bash /usr/loca\u2026\"   25 hours ago   Up 8 hours                       ovos_phal_admin\nd157740c9965   smartgic/ovos-messagebus:alpha               \"/bin/bash -c ovos-m\u2026\"   25 hours ago   Up 8 hours (healthy)             ovos_messagebus\n6e3536dcfae5   smartgic/ovos-cli:alpha                      \"sleep infinity\"         25 hours ago   Up 8 hours                       ovos_cli\n</code></pre>"},{"location":"getting-started/docker/plugins/microphone/","title":"Microphone","text":""},{"location":"getting-started/docker/plugins/microphone/#microphone-plugins","title":"Microphone plugins","text":"<p>A microhpone plugin allows you to use a specific sound protocol in order to get voice samples from your microphone. Depending the operating system you are running on, you will have to choose the correct plugin.</p> <p>Note</p> <p>The microhpone plugins are handled by the <code>ovos_listener</code> container.</p> <p>The <code>ovos_listener</code> container comes with few pre-installed microphone plugins such as:</p> <ul> <li><code>ovos-microphone-plugin-alsa</code> is using pyalsaaudio Python library (default)</li> <li><code>ovos-microphone-plugin-sounddevice</code> is using sounddevice Python library</li> </ul> <p>If the existing microphone plugins are not enough then you can install yours by following the same principle as for the STT plugins by adding a <code>listener.list</code> file within the <code>~/ovos/config/</code> directory, this file acts as a Python <code>requirements.txt</code> file.</p> <p>Plugins requirements</p> <p>These plugins have to be compatible with the <code>pip install</code> method which requires a <code>setup.py</code> file.</p> <p>When the <code>ovos_listener</code> container starts, it will look for this file and install the plugins defined in there.</p> ~/ovos/config/listener.list<pre><code>ovos-microphone-plugin-pyaudio==0.2.0a1 # Specific plugin version on PyPi\novos-microphone-plugin-arecord # Latest plugin version on PyPi\ngit+https://github.com/OpenVoiceOS/ovos-microphone-plugin-socket.git@fix/whatever # Specific branch of a plugin on GitHub\n</code></pre> <p>The <code>ovos_listener</code> container must be restarted if a change occurs in the <code>listener.list</code> file.</p> DockerPodman <pre><code>docker restart ovos_listener\n</code></pre> <pre><code>podman restart ovos_listener\n</code></pre>"},{"location":"getting-started/docker/plugins/microphone/#which-plugin-to-choose","title":"Which plugin to choose?","text":"<p>Here are the two main plugins to use per platform.</p> Plugin Platforms <code>ovos-microphone-plugin-alsa</code> <code>ovos-microphone-plugin-sounddevice</code> <p>Choose the correct plugin</p> <p>If a wrong plugin is used, the listener will not be able to hear you which means that you will not be able to interact with your Open Voice OS instance.</p>"},{"location":"getting-started/docker/plugins/phal/","title":"PHAL","text":""},{"location":"getting-started/docker/plugins/phal/#phal-plugins","title":"PHAL plugins","text":"<p>The Plugin based Hardware Abstraction Layer plugins allow you to interact with system components such as Wi-Fi, GPIO, NetworkManager, etc... but not only.</p> <p>Note</p> <p>The PHAL plugins are handled by the <code>ovos_phal</code> and <code>ovos_phal_admin</code> containers.</p> <p><code>ovos_phal_admin</code> is a privileged container</p> <p>The <code>ovos_phal_admin</code> purpose is to run plugins that require accesses to some devices, files or services.</p> <p>Plugins installed in this container have to be enabled into <code>~/ovos/config/mycroft.conf</code> in order to get loaded, this acts as an extra layer of security.</p> <p>The <code>ovos_phal</code> container comes with few pre-installed PHAL plugins such as:</p> <ul> <li><code>ovos-PHAL-plugin-alsa</code> controls system volume with ALSA</li> <li><code>ovos-PHAL-plugin-system</code> handles bus events to interact with the operating system</li> </ul> <p>If the existing PHAL plugins are not enough then you can install yours by following the same principle as for the STT plugins by adding a <code>phal.list</code> or <code>phal_admin.list</code> files within the <code>~/ovos/config/</code> directory, this file acts as a Python <code>requirements.txt</code> file.</p> <p>Plugins requirements</p> <p>These plugins have to be compatible with the <code>pip install</code> method which requires a <code>setup.py</code> file.</p> <p>When the <code>ovos_phal</code> or <code>ovos_phal_admin</code> containers start, they will look for these files and install the skpluginsills defined in there.</p> ~/ovos/config/phal.list or ~/ovos/config/phal_admin.list<pre><code>ovos-phal-plugin-ipgeo==0.0.1 # Specific plugin version on PyPi\novos-PHAL-plugin-pulse # Latest plugin version on PyPi\ngit+https://github.com/OpenVoiceOS/ovos-PHAL-plugin-homeassistant.git@fix/whatever # Specific branch of a plugin on GitHub\n</code></pre> <p>The <code>ovos_phal</code> or <code>ovos_phal_admin</code> containers must be restarted if a change occurs in the <code>phal.list</code> or <code>phal_admin.lis</code> files.</p> DockerPodman <pre><code>docker restart ovos_phal ovos_phal_admin\n</code></pre> <pre><code>podman restart ovos_phal ovos_phal_admin\n</code></pre>"},{"location":"getting-started/docker/plugins/stt/","title":"Speech-To-Text","text":""},{"location":"getting-started/docker/plugins/stt/#speech-to-text-plugins","title":"Speech-To-Text plugins","text":"<p>The Speech-To-Text plugins allow you to connect Open Voice OS with different STT servers, it could be FasterWhisper, VOSK, Google Translate, Deepgram, etc... Each of these STT providers will have different languages support, precision and performances.</p> <p>Note</p> <p>The Speech-To-Text plugins are handled by the <code>ovos_listener</code> container.</p> <p>The <code>ovos_listener</code> container comes with few pre-installed STT plugins such as:</p> <ul> <li><code>ovos-stt-plugin-server</code> allows you to reach an external STT service</li> <li><code>ovos-stt-plugin-vosk</code> is an offline STT service</li> </ul> <p>If the existing STT plugins are not enough then you can install yours by following the same principle as for the microphone plugins by adding a <code>listener.list</code> file within the <code>~/ovos/config/</code> directory, this file acts as a Python <code>requirements.txt</code> file.</p> <p>Plugins requirements</p> <p>These plugins have to be compatible with the <code>pip install</code> method which requires a <code>setup.py</code> file.</p> <p>When the <code>ovos_listener</code> container starts, it will look for this file and install the plugins defined in there.</p> ~/ovos/config/listener.list<pre><code>ovos-stt-plugin-vosk==0.2.0a1 # Specific plugin version on PyPi\novos-stt-plugin-server # Latest plugin version on PyPi\ngit+https://github.com/OpenVoiceOS/ovos-stt-plugin-chromium.git@fix/whatever # Specific branch of a plugin on GitHub\n</code></pre> <p>The <code>ovos_listener</code> container must be restarted if a change occurs in the <code>listener.list</code> file.</p> DockerPodman <pre><code>docker restart ovos_listener\n</code></pre> <pre><code>podman restart ovos_listener\n</code></pre>"},{"location":"getting-started/docker/plugins/tts/","title":"Text-To-Speech","text":""},{"location":"getting-started/docker/plugins/tts/#text-to-speech-plugins","title":"Text-To-Speech plugins","text":"<p>The Text-To-Speech plugins allow you to connect Open Voice OS with different TTS servers, it could be Piper, Coqui, Amazon Polly, Mimic, etc... Each of these TTS providers will have different voices and languages.</p> <p>Note</p> <p>The Text-To-Speech plugins are handled by the <code>ovos_audio</code> container.</p> <p>The <code>ovos_audio</code> container comes with few pre-installed TTS plugins such as:</p> <ul> <li><code>ovos-tts-plugin-mimic</code> is the original Mycroft AI TTS with the iconic Alan Pope's voice</li> <li><code>ovos-tts-plugin-mimic2</code> is the cloud based version hosted on Mycroft AI infrastructure</li> <li><code>ovos-tts-plugin-mimic3-server</code> is the latest Mycroft AI TTS engine</li> <li><code>ovos-tts-plugin-server</code> allows you to reach an external TTS service</li> </ul> <p>If the existing TTS plugins are not enough then you can install yours by following the same principle as for the skills by adding an <code>audio.list</code> file within the <code>~/ovos/config/</code> directory, this file acts as a Python <code>requirements.txt</code> file.</p> <p>Plugins requirements</p> <p>These plugins have to be compatible with the <code>pip install</code> method which requires a <code>setup.py</code> file.</p> <p>When the <code>ovos_audio</code> container starts, it will look for this file and install the plugins defined in there.</p> ~/ovos/config/audio.list<pre><code>ovos-tts-plugin-marytts==0.0.1a1 # Specific plugin version on PyPi\nneon-tts-plugin-mozilla-remote # Latest plugin version on PyPi\ngit+https://github.com/NeonGeckoCom/neon-tts-plugin-polly.git@fix/whatever # Specific branch of a plugin on GitHub\n</code></pre> <p>The <code>ovos_audio</code> container must be restarted if a change occurs in the <code>audio.list</code> file.</p> DockerPodman <pre><code>docker restart ovos_audio\n</code></pre> <pre><code>podman restart ovos_audio\n</code></pre>"},{"location":"getting-started/docker/prerequisites/cpu/","title":"CPU instructions","text":""},{"location":"getting-started/docker/prerequisites/cpu/#cpu-instructions","title":"CPU instructions","text":"<p>In order to run TensorFlow used by few Open Voice OS components, the CPU must support <code>AVX</code> (Advanced Vector Extensions) instruction set for x86 processors or <code>SIMD</code> (Single Instruction, Multiple Data) instruction set for ARM processors.</p> LinuxMac OS <pre><code>grep -E -i --color \"avx|simd\" /proc/cpuinfo\n</code></pre> <pre><code>sysctl -a | grep -E -i --color \"avx|simd\"\n</code></pre> <p>If the command does not return an output then your CPU doesn't meet the requirements for TensorFlow.</p> <p>AVX or SIMD instruction set missing</p> <p>Because the instruction set is missing does not mean that Open Voice OS can't run on your hardware, it simply means that Precise wake word engine or anything else using TensorFlow will not run on it.</p>"},{"location":"getting-started/docker/prerequisites/engine/","title":"Container engine","text":""},{"location":"getting-started/docker/prerequisites/engine/#container-engine","title":"Container engine","text":""},{"location":"getting-started/docker/prerequisites/engine/#installation","title":"Installation","text":"<p>As we are leveraging containers, a container engine such as Docker or Podman is required (only one of them should be installed), as well as their <code>composer</code>.</p> <p>If you are not familiar with what a container engine or a <code>composer</code> are then please refer to this section first as these fundamentals must be understood.</p>"},{"location":"getting-started/docker/prerequisites/engine/#versions","title":"Versions","text":"<p>When running on Linux, please make sure to not use Docker Desktop but prefer Docker Engine as it is a better choice in our case. Docker Desktop runs a virtual machine which doesn't have access to the same devices as the host has, due to this limitation the <code>/dev/snd</code> device will not be usable and this will prevent the usage of speakers and microphone.</p> <p><code>docker-compose</code> versus <code>docker compose</code></p> <p>As mentioned by Docker, from July 2023 Compose V1 (<code>docker-compose</code>) will not received updates anymore which makes it deprecated and replaced by Compose V2 (<code>docker compose</code>) directly embedded into the <code>docker</code> command line.</p> <p>Either you choose to install Docker or Podman and their <code>composer</code> on Linux, Mac OS or Windows, please refer to the official documentation<sup>1</sup>.</p> <p>Minimum required versions</p> <p>In order to get the latest features supported by ovos-docker, please make sure to install a recent version of Docker (<code>&gt;= 24.x.x</code>) or Podman (<code>&gt;= 4.3.x</code>) for your operating system.</p>"},{"location":"getting-started/docker/prerequisites/engine/#dont-be-root-be-a-user","title":"Don't be <code>root</code>, be a user","text":"<p>You should not run <code>docker</code> command as <code>root</code> user or using the <code>sudo</code> command, if so then you will get some error messages such as <code>Permission denied</code> and some containers could restart in a loop.</p> <p>To allow a simple user to execute the <code>docker</code> command, make sure to add the user to the <code>docker</code> group.</p> Linux <pre><code>sudo usermod -a -G docker $USER\n</code></pre> <p>Once added to the <code>docker</code> group you will have to logout from the current session (graphical or SSH) in order to get the group added to your user once you reconnect.</p> <p>Once reconnected, run the following command to ensure the <code>docker</code> has been appened to your <code>$USER</code>.</p> Linux <pre><code>id\nuid=1000(foobar) gid=1000(foobar) groups=1000(foobar),973(docker)\n</code></pre> <p>The <code>GID</code> could differ compare to your setup.</p>"},{"location":"getting-started/docker/prerequisites/engine/#validation","title":"Validation","text":"DockerPodman <pre><code>docker system info\ndocker container list\n</code></pre> <pre><code>podman system info\npodman container list\n</code></pre> <ol> <li> <p>Docker official documentation or Podman official documentation.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting-started/docker/prerequisites/sound/","title":"Sound system","text":""},{"location":"getting-started/docker/prerequisites/sound/#sound-system","title":"Sound system","text":"<p>PulseAudio is a requirement and has to be up and running on the host (not inside the containers) to expose a socket (for communication) and a cookie (for authentication) to allow the containers to have access to the microphone (input device) and speakers (output device).</p> <p>On modern Linux distribution, PipeWire now handles the sound stack on the system.</p> <p>Sound server auto-detection</p> <p><code>ovos-docker</code> supports both native PulseAudio and PipeWire, the containers will automatically detect which sound server is running on the operating system.</p>"},{"location":"getting-started/docker/prerequisites/sound/#mac-os-and-windows","title":"Mac OS and Windows","text":"<p>If you are running an operating system other Linux such as Mac OS or Windows, then PulseAudio will have to be installed to act as a gateway between the containers and the OS.</p> Mac OSWindows WSL2 <pre><code>brew install pulseaudio\nbrew services stop pulseaudio\nsed -i \"\" \"s/#load-module module-native-protocol-tcp/load-module module-native-protocol-tcp/g\" $(brew ls pulseaudio | grep default.pa$)\nbrew services start pulseaudio\n</code></pre> <pre><code>sudo apt install pulseaudio\n</code></pre>"},{"location":"getting-started/docker/prerequisites/sound/#permissions","title":"Permissions","text":"<p>The user running the containers must be part of the <code>audio</code> system group (depending the Linux distribution).</p> <p>PulseAudio files permissions</p> <p>Check the permissions for <code>~/.config/pulse/</code> and <code>/run/user/1000/pulse</code> directories, they should belong to the user running the stack (where <code>1000</code> is your user ID), not to <code>root</code> user.</p> <p>If you are running on Mac OS, there is no <code>/run/user/1000/</code> directory.</p>"},{"location":"getting-started/docker/prerequisites/sound/#validation","title":"Validation","text":"<p><code>pactl</code> is a PulseAudio command shipped with the <code>pulseaudio-utils</code> package and <code>pw-cli</code> is a PipeWire command shipped with <code>pipewire-utils</code> or <code>pipewire-bin</code> depending your distribution.</p> <p>These commands provide information about the status of PulseAudio or PipeWire.</p> PulseAudioPipeWire <pre><code>pactl info\n</code></pre> <pre><code>pw-cli info\n</code></pre>"},{"location":"getting-started/docker/prerequisites/sound/#list-microphones","title":"List microphones","text":"<p>At least one of the sources (microphones/audio input) returned, should match the <code>Default Source</code> line from the <code>pactl info</code> command or the <code>Audio/Source</code> line from the <code>wpctl status</code> command.</p> PulseAudioPipeWire <pre><code>pactl list sources short\n</code></pre> <pre><code>wpctl status | grep Audio/Source\n</code></pre>"},{"location":"getting-started/docker/prerequisites/sound/#list-speakers","title":"List speakers","text":"<p>At least one of the sinks (speakers/audio output) returned, should match the <code>Default Sink</code> line from the <code>pactl info</code> command or the <code>Audio/Sink</code> line from the <code>wpctl status</code> command.</p> PulseAudioPipeWire <pre><code>pactl list sinks short\n</code></pre> <pre><code>wpctl status | grep Audio/Sink\n</code></pre>"},{"location":"getting-started/docker/security/hardening/","title":"System hardening","text":""},{"location":"getting-started/docker/security/hardening/#basic-ovos-hardening","title":"Basic OVOS hardening","text":"<p>In order to secure your Open Voice OS instance, few more steps are required and few concepts must be understood.</p>"},{"location":"getting-started/docker/security/hardening/#apparmor","title":"AppArmor","text":"<p>AppArmor and SELinux are examples of Mandatory Access Control (MAC) systems. These systems differ from other security controls which are generally called Discretionary Access Control (DAC) systems in that, generally, the user can't change their operation.</p> <p>AppArmor packages</p> <p>AppArmor must be installed on your system before going further. Please refer to your Linux distribution documentation to install it.</p>"},{"location":"getting-started/docker/security/hardening/#enable-apparmor","title":"Enable AppArmor","text":"Raspberry Pi OSDebian &amp; Ubuntu /boot/cmdline.txt<pre><code>apparmor=1 security=apparmor\n</code></pre> /etc/default/grub.d/apparmor.cfg<pre><code>apparmor=1 security=apparmor\n</code></pre> <p>System must be rebooted to instruct the kernel to load AppArmor during the boot sequence. Once rebooted, check the AppArmor status using the <code>aa-status</code> command.</p> Raspberry Pi OSDebian &amp; Ubuntu <pre><code>sudo aa-status\n</code></pre> <pre><code>sudo aa-status\n</code></pre>"},{"location":"getting-started/docker/security/hardening/#apparmor-docker-profile","title":"AppArmor Docker profile","text":"<p>AppArmor and Podman support<sup>1</sup></p> <p>AppArmor support for Podman is not yet fully functional.</p> <p>Docker applies the <code>docker-default</code> AppArmor profile to new containers. In Docker 1.13 and later this profile is created in <code>tmpfs</code> and then loaded into the kernel.</p> <p>The container engine should now be aware of <code>apparmor</code> as an available security option.</p> <pre><code>docker system info | grep -i apparmor\n</code></pre> <p>All the containers except <code>ovos_phal_admin</code> should now be confined with the <code>docker-default</code> AppArmor profile.</p> <pre><code>docker container list --quiet --all --filter \"name=ovos\" | xargs docker inspect --format \"{{ .Name }}: AppArmorProfile={{ .AppArmorProfile }}\"\n/ovos_skill_volume: AppArmorProfile=docker-default\n/ovos_skill_wikipedia: AppArmorProfile=docker-default\n/ovos_skill_fallback_unknown: AppArmorProfile=docker-default\n/ovos_skill_alerts: AppArmorProfile=docker-default\n/ovos_skill_hello_world: AppArmorProfile=docker-default\n/ovos_skill_weather: AppArmorProfile=docker-default\n/ovos_skill_stop: AppArmorProfile=docker-default\n/ovos_skill_date_time: AppArmorProfile=docker-default\n/ovos_skill_personal: AppArmorProfile=docker-default\n/ovos_listener: AppArmorProfile=docker-default\n/ovos_audio: AppArmorProfile=docker-default\n/ovos_core: AppArmorProfile=docker-default\n/ovos_phal: AppArmorProfile=docker-default\n/ovos_phal_admin: AppArmorProfile=unconfined\n/ovos_messagebus: AppArmorProfile=docker-default\n/ovos_cli: AppArmorProfile=docker-default\n</code></pre> <p><code>ovos_phal_admin</code> container is not confined</p> <p>The <code>ovos_phal_admin</code> container is not confined as it runs as a <code>privileged</code> container.</p>"},{"location":"getting-started/docker/security/hardening/#message-bus","title":"Message bus","text":"<p>By default, the message bus is listening on address <code>0.0.0.0</code> and port <code>8181</code> because the <code>ovos_messagebus</code> is created using the <code>--network host</code> option. This could be a security issue as an external device could connect to the message bus and send and/or read messages.</p> <p>Why using <code>--network host</code>?</p> <p>Some Open Voice OS skills such as Home Assistant or Sonos require access to your private network in order to communicate with your IoT devices.</p> <p>To prevent potential security issues, it is recommended to use a firewall the port <code>8181</code>.</p> <p><code>iptables</code> will be demonstrated as an example but if <code>firewalld</code> or <code>ufw</code> services are used, then make sure to be compliant with your distribution.</p> Linux <pre><code>sudo iptables -A INPUT -p tcp -s localhost --dport 8181 -j ACCEPT\nsudo iptables iptables -A INPUT -p tcp --dport 8181 -j DROP\n</code></pre> <p>This will allow connections to port <code>8181</code> only from localhost (internal).</p> <p>Keep your ports closed</p> <p>Keep in mind to firewall any other ports which should not be exposed outside of the host by using the same IPTables method.</p> <p>If you really need to connect an external application to the message bus, we recommend to use HiveMind to ensure a proper security exposure.</p> <ol> <li> <p>Enable rootless AppArmor for Podman \u21a9</p> </li> </ol>"},{"location":"getting-started/docker/security/hivemind/","title":"HiveMind","text":""},{"location":"getting-started/docker/security/hivemind/#hivemind-to-the-rescue","title":"HiveMind to the rescue","text":""},{"location":"getting-started/docker/security/hivemind/#what-is-hivemind","title":"What is HiveMind?","text":"<p>HiveMind is a community-developed superset or extension of Open Voice OS, the open-source voice operating system.</p> <p>With HiveMind, you can extend one (or more, but usually just one!) instance of Open Voice OS to as many devices as you want, including devices that can't ordinarily run Open Voice OS!</p> <p>Official documentation</p> <p>What it means, is that HiveMind allows external connections to the message bus by using a secured protocol.</p> <p>Fulfill the requirements first</p> <p>Before going further, please make sure that all the requirements are fulfilled.</p> <p>A composition file is available in order to deploy <code>hivemind_listener</code> and <code>hivemind_cli</code> services.</p> <p>Podman users </p> <p>If you are running Podman instead of Docker, replace <code>docker compose</code> with <code>podmand-compose</code>.</p> Raspberry PiLinuxMac OSWindows WSL2 <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.raspberrypi.yml --file docker-compose.skills.yml --file docker-compose.hivemind.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.yml --file docker-compose.skills.yml --file docker-compose.hivemind.yml up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.macos.yml --file docker-compose.skills.yml --file docker-compose.hivemind.yml --env-file .env up --detach\n</code></pre> <pre><code>docker compose --project-name ovos --file docker-compose.windows.yml --file docker-compose.skills.yml --file docker-compose.hivemind.yml up --detach\n</code></pre> <p>For more information about how to authenticate with the HiveMind listener, please read the HiveMind-core repository documentation.</p> <p>Once the HiveMind containers are up and running, the HiveMind command line allows you to add client, to list them, to delete them, etc...</p> DockerPodman <pre><code>docker exec --interactive --tty hivemind_cli hivemind-core --help\n</code></pre> <pre><code>podman exec --interactive --tty hivemind_cli hivemind-core --help\n</code></pre> <p>Port <code>5678</code> must be open</p> <p>In order to to reach the HiveMind listener, the port <code>5678</code> has to be open on the host. Please make sure your firewall allows the connection to this port or the clients will not be able to connect to it.</p>"},{"location":"getting-started/docker/security/hivemind/#containers-status","title":"Containers status","text":"<p>At this point of the installation, here are the containers that should be up and running.</p> DockerPodman <pre><code>docker container list --all --filter 'name=ovos'\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED          STATUS                 PORTS     NAMES\n4e2d45799de8   smartgic/hivemind-cli:alpha                  \"sleep infinity\"         16 minutes ago   Up 16 minutes                    hivemind_cli\n612a9ea32405   smartgic/hivemind-listener:alpha             \"hivemind-core listen\"   16 minutes ago   Up 16 minutes                    hivemind_listener\n1446b87d7a32   smartgic/ovos-skill-volume:alpha             \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_volume\n7ad46a871661   smartgic/ovos-skill-wikipedia:alpha          \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_wikipedia\nb43b8cf31a43   smartgic/ovos-skill-fallback-unknown:alpha   \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_fallback_unknown\nf27d3fceecec   smartgic/ovos-skill-alerts:alpha             \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_alerts\n30b70c9e72ef   smartgic/ovos-skill-hello-world:alpha        \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_hello_world\nf42175c6d7b8   smartgic/ovos-skill-weather:alpha            \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_weather\n0ae42a59fb0b   smartgic/ovos-skill-stop:alpha               \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_stop\n5760fb22deb9   smartgic/ovos-skill-date-time:alpha          \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_date_time\n73f4d4b0a091   smartgic/ovos-skill-personal:alpha           \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_personal\n219eb6254d32   smartgic/ovos-listener-dinkum:alpha          \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_listener\n31f5d5e7a1ec   smartgic/ovos-audio:alpha                    \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_audio\n05e94905b867   smartgic/ovos-core:alpha                     \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_core\nd256c2e7b6f3   smartgic/ovos-phal:alpha                     \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_phal\na4db13a597a4   smartgic/ovos-phal-admin:alpha               \"/bin/bash /usr/loca\u2026\"   25 hours ago     Up 8 hours                       ovos_phal_admin\nd157740c9965   smartgic/ovos-messagebus:alpha               \"/bin/bash -c ovos-m\u2026\"   25 hours ago     Up 8 hours (healthy)             ovos_messagebus\n6e3536dcfae5   smartgic/ovos-cli:alpha                      \"sleep infinity\"         25 hours ago     Up 8 hours                       ovos_cli\n</code></pre> <pre><code>podman container list --all --filter 'name=ovos'\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED          STATUS                 PORTS     NAMES\n4e2d45799de8   smartgic/hivemind-cli:alpha                  \"sleep infinity\"         16 minutes ago   Up 16 minutes                    hivemind_cli\n612a9ea32405   smartgic/hivemind-listener:alpha             \"hivemind-core listen\"   16 minutes ago   Up 16 minutes                    hivemind_listener\n1446b87d7a32   smartgic/ovos-skill-volume:alpha             \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_volume\n7ad46a871661   smartgic/ovos-skill-wikipedia:alpha          \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_wikipedia\nb43b8cf31a43   smartgic/ovos-skill-fallback-unknown:alpha   \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_fallback_unknown\nf27d3fceecec   smartgic/ovos-skill-alerts:alpha             \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_alerts\n30b70c9e72ef   smartgic/ovos-skill-hello-world:alpha        \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_hello_world\nf42175c6d7b8   smartgic/ovos-skill-weather:alpha            \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_weather\n0ae42a59fb0b   smartgic/ovos-skill-stop:alpha               \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_stop\n5760fb22deb9   smartgic/ovos-skill-date-time:alpha          \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_date_time\n73f4d4b0a091   smartgic/ovos-skill-personal:alpha           \"ovos-skill-launcher\u2026\"   19 hours ago     Up 8 hours                       ovos_skill_personal\n219eb6254d32   smartgic/ovos-listener-dinkum:alpha          \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_listener\n31f5d5e7a1ec   smartgic/ovos-audio:alpha                    \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_audio\n05e94905b867   smartgic/ovos-core:alpha                     \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_core\nd256c2e7b6f3   smartgic/ovos-phal:alpha                     \"/bin/bash /usr/loca\u2026\"   19 hours ago     Up 8 hours                       ovos_phal\na4db13a597a4   smartgic/ovos-phal-admin:alpha               \"/bin/bash /usr/loca\u2026\"   25 hours ago     Up 8 hours                       ovos_phal_admin\nd157740c9965   smartgic/ovos-messagebus:alpha               \"/bin/bash -c ovos-m\u2026\"   25 hours ago     Up 8 hours (healthy)             ovos_messagebus\n6e3536dcfae5   smartgic/ovos-cli:alpha                      \"sleep infinity\"         25 hours ago     Up 8 hours                       ovos_cli\n</code></pre>"}]}